<?php

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.73
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Hostinger\ApiException;
use Hostinger\Configuration;
use Hostinger\HeaderSelector;
use Hostinger\ObjectSerializer;

class VPSVirtualMachineApi
{
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getAttachedPublicKeysV1
     *
     * Get attached public keys
     *
     * @return \Hostinger\Model\VPSGetPublicKeyListV1200Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function getAttachedPublicKeysV1(int $virtualMachineId, ?int $page = null, ): \Hostinger\Model\VPSGetPublicKeyListV1200Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->getAttachedPublicKeysV1Request($virtualMachineId, $page, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSGetPublicKeyListV1200Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'getAttachedPublicKeysV1'
     *
     * @throws InvalidArgumentException
     */
    protected function getAttachedPublicKeysV1Request(int $virtualMachineId,?int $page = null,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/public-keys';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = null;
        $query = ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        );

        return $this->buildRequest('GET', $resourcePath, $body, $query);
    }

    /**
     * Operation getMetricsV1
     *
     * Get metrics
     *
     * @return \Hostinger\Model\VPSV1MetricsMetricsCollection|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function getMetricsV1(int $virtualMachineId, \DateTime $dateFrom, \DateTime $dateTo, ): \Hostinger\Model\VPSV1MetricsMetricsCollection|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->getMetricsV1Request($virtualMachineId, $dateFrom, $dateTo, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1MetricsMetricsCollection';
                break;
            case 422:
                $returnType = '\Hostinger\Model\BillingCreateNewServiceOrderV1422Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'getMetricsV1'
     *
     * @throws InvalidArgumentException
     */
    protected function getMetricsV1Request(int $virtualMachineId,\DateTime $dateFrom,\DateTime $dateTo,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/metrics';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = null;
        $query = ObjectSerializer::toQueryValue(
            $dateFrom,
            'date_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        );
        $query = ObjectSerializer::toQueryValue(
            $dateTo,
            'date_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        );

        return $this->buildRequest('GET', $resourcePath, $body, $query);
    }

    /**
     * Operation getVirtualMachineListV1
     *
     * Get virtual machine list
     *
     * @return \Hostinger\Model\VPSV1VirtualMachineVirtualMachineResource[]|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function getVirtualMachineListV1(): array|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->getVirtualMachineListV1Request();

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1VirtualMachineVirtualMachineResource[]';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'getVirtualMachineListV1'
     *
     * @throws InvalidArgumentException
     */
    protected function getVirtualMachineListV1Request(): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines';

        $body = null;
        $query = [];

        return $this->buildRequest('GET', $resourcePath, $body, $query);
    }

    /**
     * Operation getVirtualMachineV1
     *
     * Get virtual machine
     *
     * @return \Hostinger\Model\VPSV1VirtualMachineVirtualMachineResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function getVirtualMachineV1(int $virtualMachineId, ): \Hostinger\Model\VPSV1VirtualMachineVirtualMachineResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->getVirtualMachineV1Request($virtualMachineId, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1VirtualMachineVirtualMachineResource';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'getVirtualMachineV1'
     *
     * @throws InvalidArgumentException
     */
    protected function getVirtualMachineV1Request(int $virtualMachineId,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = null;
        $query = [];

        return $this->buildRequest('GET', $resourcePath, $body, $query);
    }

    /**
     * Operation purchaseNewVirtualMachineV1
     *
     * Purchase new virtual machine
     *
     * @return \Hostinger\Model\BillingV1OrderVirtualMachineOrderResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function purchaseNewVirtualMachineV1(\Hostinger\Model\VPSV1VirtualMachinePurchaseRequest $vPSV1VirtualMachinePurchaseRequest, ): \Hostinger\Model\BillingV1OrderVirtualMachineOrderResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->purchaseNewVirtualMachineV1Request($vPSV1VirtualMachinePurchaseRequest, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\BillingV1OrderVirtualMachineOrderResource';
                break;
            case 422:
                $returnType = '\Hostinger\Model\BillingCreateNewServiceOrderV1422Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'purchaseNewVirtualMachineV1'
     *
     * @throws InvalidArgumentException
     */
    protected function purchaseNewVirtualMachineV1Request(\Hostinger\Model\VPSV1VirtualMachinePurchaseRequest $vPSV1VirtualMachinePurchaseRequest,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines';

        $body = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vPSV1VirtualMachinePurchaseRequest));
        $query = [];

        return $this->buildRequest('POST', $resourcePath, $body, $query);
    }

    /**
     * Operation recreateVirtualMachineV1
     *
     * Recreate virtual machine
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function recreateVirtualMachineV1(int $virtualMachineId, \Hostinger\Model\VPSV1VirtualMachineRecreateRequest $vPSV1VirtualMachineRecreateRequest, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->recreateVirtualMachineV1Request($virtualMachineId, $vPSV1VirtualMachineRecreateRequest, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 422:
                $returnType = '\Hostinger\Model\BillingCreateNewServiceOrderV1422Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'recreateVirtualMachineV1'
     *
     * @throws InvalidArgumentException
     */
    protected function recreateVirtualMachineV1Request(int $virtualMachineId,\Hostinger\Model\VPSV1VirtualMachineRecreateRequest $vPSV1VirtualMachineRecreateRequest,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/recreate';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vPSV1VirtualMachineRecreateRequest));
        $query = [];

        return $this->buildRequest('POST', $resourcePath, $body, $query);
    }

    /**
     * Operation resetHostnameV1
     *
     * Reset hostname
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function resetHostnameV1(int $virtualMachineId, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->resetHostnameV1Request($virtualMachineId, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'resetHostnameV1'
     *
     * @throws InvalidArgumentException
     */
    protected function resetHostnameV1Request(int $virtualMachineId,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/hostname';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = null;
        $query = [];

        return $this->buildRequest('DELETE', $resourcePath, $body, $query);
    }

    /**
     * Operation restartVirtualMachineV1
     *
     * Restart virtual machine
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function restartVirtualMachineV1(int $virtualMachineId, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->restartVirtualMachineV1Request($virtualMachineId, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'restartVirtualMachineV1'
     *
     * @throws InvalidArgumentException
     */
    protected function restartVirtualMachineV1Request(int $virtualMachineId,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/restart';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = null;
        $query = [];

        return $this->buildRequest('POST', $resourcePath, $body, $query);
    }

    /**
     * Operation setHostnameV1
     *
     * Set hostname
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function setHostnameV1(int $virtualMachineId, \Hostinger\Model\VPSV1VirtualMachineHostnameUpdateRequest $vPSV1VirtualMachineHostnameUpdateRequest, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->setHostnameV1Request($virtualMachineId, $vPSV1VirtualMachineHostnameUpdateRequest, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 422:
                $returnType = '\Hostinger\Model\BillingCreateNewServiceOrderV1422Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'setHostnameV1'
     *
     * @throws InvalidArgumentException
     */
    protected function setHostnameV1Request(int $virtualMachineId,\Hostinger\Model\VPSV1VirtualMachineHostnameUpdateRequest $vPSV1VirtualMachineHostnameUpdateRequest,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/hostname';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vPSV1VirtualMachineHostnameUpdateRequest));
        $query = [];

        return $this->buildRequest('PUT', $resourcePath, $body, $query);
    }

    /**
     * Operation setNameserversV1
     *
     * Set nameservers
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function setNameserversV1(int $virtualMachineId, \Hostinger\Model\VPSV1VirtualMachineNameserversUpdateRequest $vPSV1VirtualMachineNameserversUpdateRequest, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->setNameserversV1Request($virtualMachineId, $vPSV1VirtualMachineNameserversUpdateRequest, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 422:
                $returnType = '\Hostinger\Model\BillingCreateNewServiceOrderV1422Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'setNameserversV1'
     *
     * @throws InvalidArgumentException
     */
    protected function setNameserversV1Request(int $virtualMachineId,\Hostinger\Model\VPSV1VirtualMachineNameserversUpdateRequest $vPSV1VirtualMachineNameserversUpdateRequest,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/nameservers';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vPSV1VirtualMachineNameserversUpdateRequest));
        $query = [];

        return $this->buildRequest('PUT', $resourcePath, $body, $query);
    }

    /**
     * Operation setPanelPasswordV1
     *
     * Set panel password
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function setPanelPasswordV1(int $virtualMachineId, \Hostinger\Model\VPSV1VirtualMachinePanelPasswordUpdateRequest $vPSV1VirtualMachinePanelPasswordUpdateRequest, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->setPanelPasswordV1Request($virtualMachineId, $vPSV1VirtualMachinePanelPasswordUpdateRequest, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 422:
                $returnType = '\Hostinger\Model\BillingCreateNewServiceOrderV1422Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'setPanelPasswordV1'
     *
     * @throws InvalidArgumentException
     */
    protected function setPanelPasswordV1Request(int $virtualMachineId,\Hostinger\Model\VPSV1VirtualMachinePanelPasswordUpdateRequest $vPSV1VirtualMachinePanelPasswordUpdateRequest,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/panel-password';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vPSV1VirtualMachinePanelPasswordUpdateRequest));
        $query = [];

        return $this->buildRequest('PUT', $resourcePath, $body, $query);
    }

    /**
     * Operation setRootPasswordV1
     *
     * Set root password
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function setRootPasswordV1(int $virtualMachineId, \Hostinger\Model\VPSV1VirtualMachineRootPasswordUpdateRequest $vPSV1VirtualMachineRootPasswordUpdateRequest, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->setRootPasswordV1Request($virtualMachineId, $vPSV1VirtualMachineRootPasswordUpdateRequest, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 422:
                $returnType = '\Hostinger\Model\BillingCreateNewServiceOrderV1422Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'setRootPasswordV1'
     *
     * @throws InvalidArgumentException
     */
    protected function setRootPasswordV1Request(int $virtualMachineId,\Hostinger\Model\VPSV1VirtualMachineRootPasswordUpdateRequest $vPSV1VirtualMachineRootPasswordUpdateRequest,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/root-password';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vPSV1VirtualMachineRootPasswordUpdateRequest));
        $query = [];

        return $this->buildRequest('PUT', $resourcePath, $body, $query);
    }

    /**
     * Operation setupNewVirtualMachineV1
     *
     * Setup new virtual machine
     *
     * @return \Hostinger\Model\VPSV1VirtualMachineVirtualMachineResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function setupNewVirtualMachineV1(int $virtualMachineId, \Hostinger\Model\VPSV1VirtualMachineSetupRequest $vPSV1VirtualMachineSetupRequest, ): \Hostinger\Model\VPSV1VirtualMachineVirtualMachineResource|\Hostinger\Model\BillingCreateNewServiceOrderV1422Response|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->setupNewVirtualMachineV1Request($virtualMachineId, $vPSV1VirtualMachineSetupRequest, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1VirtualMachineVirtualMachineResource';
                break;
            case 422:
                $returnType = '\Hostinger\Model\BillingCreateNewServiceOrderV1422Response';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'setupNewVirtualMachineV1'
     *
     * @throws InvalidArgumentException
     */
    protected function setupNewVirtualMachineV1Request(int $virtualMachineId,\Hostinger\Model\VPSV1VirtualMachineSetupRequest $vPSV1VirtualMachineSetupRequest,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/setup';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vPSV1VirtualMachineSetupRequest));
        $query = [];

        return $this->buildRequest('POST', $resourcePath, $body, $query);
    }

    /**
     * Operation startVirtualMachineV1
     *
     * Start virtual machine
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function startVirtualMachineV1(int $virtualMachineId, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->startVirtualMachineV1Request($virtualMachineId, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'startVirtualMachineV1'
     *
     * @throws InvalidArgumentException
     */
    protected function startVirtualMachineV1Request(int $virtualMachineId,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/start';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = null;
        $query = [];

        return $this->buildRequest('POST', $resourcePath, $body, $query);
    }

    /**
     * Operation stopVirtualMachineV1
     *
     * Stop virtual machine
     *
     * @return \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @throws GuzzleException
     */
    public function stopVirtualMachineV1(int $virtualMachineId, ): \Hostinger\Model\VPSV1ActionActionResource|\Hostinger\Model\BillingGetCatalogItemListV1401Response|\Hostinger\Model\BillingGetCatalogItemListV1500Response
    {
        $request = $this->stopVirtualMachineV1Request($virtualMachineId, );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            if ($this->config->shouldThrowException()) {
                throw ApiException::fromRequestException($e);
            } else {
                $response = $e->getResponse();
            }
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        $statusCode = $response->getStatusCode();
        $returnType = null;

        switch ($statusCode) {
            case 200:
                $returnType = '\Hostinger\Model\VPSV1ActionActionResource';
                break;
            case 401:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1401Response';
                break;
            case 500:
                $returnType = '\Hostinger\Model\BillingGetCatalogItemListV1500Response';
                break;
        }

        return ObjectSerializer::deserialize($response->getBody()->getContents(), $returnType);
    }

    /**
     * Create request for operation 'stopVirtualMachineV1'
     *
     * @throws InvalidArgumentException
     */
    protected function stopVirtualMachineV1Request(int $virtualMachineId,): Request
    {
        $resourcePath = '/api/vps/v1/virtual-machines/{virtualMachineId}/stop';
        $resourcePath = str_replace(
            '{' . 'virtualMachineId' . '}',
            ObjectSerializer::toPathValue((string) $virtualMachineId),
            $resourcePath
        );

        $body = null;
        $query = [];

        return $this->buildRequest('POST', $resourcePath, $body, $query);
    }

    /**
     * @return array<string, mixed>
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * @param array<string, string> $query
     */
    protected function buildRequest(
        string $httpMethod,
        string $resourcePath,
        ?string $body = null,
        array $query = [],
        string $contentType = 'application/json',
    ): Request {
        $headers = $this->headerSelector->selectHeaders(
            accept: ['application/json'],
            contentType: $contentType,
            isMultipart: false
        );
        $headers['User-Agent'] = $this->config->getUserAgent();

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = ObjectSerializer::buildQuery($query);

        return new Request(
            $httpMethod,
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $body
        );
    }
}
