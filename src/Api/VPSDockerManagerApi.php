<?php
/** @noinspection PhpFullyQualifiedNameUsageInspection */

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.96
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Exception\ExceptionInterface;
use Symfony\Component\Serializer\SerializerInterface;
use Hostinger\ApiException;
use Hostinger\Configuration;
use Hostinger\ObjectSerializer;

class VPSDockerManagerApi
{
    protected ClientInterface $client;

    protected Configuration $config;

    protected SerializerInterface $serializer;

    public function __construct(
        ?Configuration $config = null,
        ?ClientInterface $client = null,
    ) {
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->client = $client ?: new Client();
        $this->serializer = ObjectSerializer::getSerializer();
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function createNewProjectV1(int $virtualMachineId, \Hostinger\Model\VPSV1VirtualMachineDockerManagerUpRequest $vPSV1VirtualMachineDockerManagerUpRequest): \Hostinger\Model\VPSV1ActionActionResource
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker', $virtualMachineId),
            headers: $this->getHeaders(),
            body: $this->serializer->serialize($vPSV1VirtualMachineDockerManagerUpRequest, JsonEncoder::FORMAT),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1ActionActionResource::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function deleteProjectV1(int $virtualMachineId, string $projectName): \Hostinger\Model\VPSV1ActionActionResource
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/down', $virtualMachineId, $projectName),
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/down', $virtualMachineId, $projectName),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1ActionActionResource::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function getProjectContainersV1(int $virtualMachineId, string $projectName): \Hostinger\Model\VPSV1DockerManagerContainerCollection
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/containers', $virtualMachineId, $projectName),
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/containers', $virtualMachineId, $projectName),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1DockerManagerContainerCollection::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function getProjectContentsV1(int $virtualMachineId, string $projectName): \Hostinger\Model\VPSV1DockerManagerContentResource
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}', $virtualMachineId, $projectName),
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}', $virtualMachineId, $projectName),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1DockerManagerContentResource::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function getProjectListV1(int $virtualMachineId): \Hostinger\Model\VPSV1DockerManagerProjectCollection
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker', $virtualMachineId),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1DockerManagerProjectCollection::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function getProjectLogsV1(int $virtualMachineId, string $projectName): \Hostinger\Model\VPSV1DockerManagerLogsCollection
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/logs', $virtualMachineId, $projectName),
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/logs', $virtualMachineId, $projectName),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1DockerManagerLogsCollection::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function restartProjectV1(int $virtualMachineId, string $projectName): \Hostinger\Model\VPSV1ActionActionResource
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/restart', $virtualMachineId, $projectName),
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/restart', $virtualMachineId, $projectName),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1ActionActionResource::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function startProjectV1(int $virtualMachineId, string $projectName): \Hostinger\Model\VPSV1ActionActionResource
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/start', $virtualMachineId, $projectName),
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/start', $virtualMachineId, $projectName),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1ActionActionResource::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function stopProjectV1(int $virtualMachineId, string $projectName): \Hostinger\Model\VPSV1ActionActionResource
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/stop', $virtualMachineId, $projectName),
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/stop', $virtualMachineId, $projectName),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1ActionActionResource::class, JsonEncoder::FORMAT);
    }

    /**
    * @throws ExceptionInterface
    * @throws ApiException
    * @throws GuzzleException
    */
    public function updateProjectV1(int $virtualMachineId, string $projectName): \Hostinger\Model\VPSV1ActionActionResource
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/update', $virtualMachineId, $projectName),
            uri: $this->buildResourcePath('/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/update', $virtualMachineId, $projectName),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), \Hostinger\Model\VPSV1ActionActionResource::class, JsonEncoder::FORMAT);
    }

    private function buildResourcePath(string $path, ...$values): string
    {
        foreach ($values as $value) {
            if (is_array($value)) {
                $value = implode(',', $value);
            }

            $path = str_replace('{' . 'VPSDockerManager' . '}', $value, $path);
        }

        return $path;
    }

    /**
     * @return array<string, string>
     */
    private function getHeaders(): array
    {
        return [
            'Authorization' => 'Bearer ' . $this->config->getAccessToken(),
            'Content-Type' => 'application/json',
            'User-Agent' => $this->config->getUserAgent(),
        ];
    }

    private function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
