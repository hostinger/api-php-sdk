<?php

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.73
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class DNSV1ZoneResetRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static string $openAPIModelName = 'DNS.V1.Zone.ResetRequest';

    /**
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'sync' => 'bool',
        'resetEmailRecords' => 'bool',
        'whitelistedRecordTypes' => 'string[]'
    ];

    /**
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'sync' => null,
        'resetEmailRecords' => null,
        'whitelistedRecordTypes' => null
    ];

    /**
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'sync' => false,
        'resetEmailRecords' => false,
        'whitelistedRecordTypes' => false
    ];

    /**
      * @var array<string>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * @return array<string>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * @param array<string> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'sync' => 'sync',
        'resetEmailRecords' => 'reset_email_records',
        'whitelistedRecordTypes' => 'whitelisted_record_types'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $setters = [
        'sync' => 'setSync',
        'resetEmailRecords' => 'setResetEmailRecords',
        'whitelistedRecordTypes' => 'setWhitelistedRecordTypes'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $getters = [
        'sync' => 'getSync',
        'resetEmailRecords' => 'getResetEmailRecords',
        'whitelistedRecordTypes' => 'getWhitelistedRecordTypes'
    ];

    /**
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * @var array<string, mixed>
     */
    protected array $container = [];

    /**
     * @param array<string, mixed> $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = [])
    {
        $this->setIfExists('sync', $data, true);
        $this->setIfExists('resetEmailRecords', $data, true);
        $this->setIfExists('whitelistedRecordTypes', $data, null);
    }

    /**
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * @return array<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * @return bool|null
     */
    public function getSync(): ?bool
    {
        return $this->container['sync'];
    }

    /**
     * @param bool|null $sync Determines if operation should be run synchronously
     */
    public function setSync(?bool $sync): static
    {
        $this->container['sync'] = $sync;

        return $this;
    }
    /**
     * @return bool|null
     */
    public function getResetEmailRecords(): ?bool
    {
        return $this->container['resetEmailRecords'];
    }

    /**
     * @param bool|null $resetEmailRecords Determines if email records should be reset
     */
    public function setResetEmailRecords(?bool $resetEmailRecords): static
    {
        $this->container['resetEmailRecords'] = $resetEmailRecords;

        return $this;
    }
    /**
     * @return string[]|null
     */
    public function getWhitelistedRecordTypes(): ?array
    {
        return $this->container['whitelistedRecordTypes'];
    }

    /**
     * @param string[]|null $whitelistedRecordTypes Specifies which record types to not reset
     */
    public function setWhitelistedRecordTypes(?array $whitelistedRecordTypes): static
    {
        $this->container['whitelistedRecordTypes'] = $whitelistedRecordTypes;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

