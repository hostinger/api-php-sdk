<?php

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.96
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class VPSV1DockerManagerContainerResource implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static string $openAPIModelName = 'VPS.V1.DockerManager.ContainerResource';

    /**
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'image' => 'string',
        'command' => 'string',
        'status' => 'string',
        'state' => 'string',
        'ports' => '\Hostinger\Model\VPSV1DockerManagerContainerPortCollection',
        'stats' => '\Hostinger\Model\VPSV1DockerManagerContainerStatsResource'
    ];

    /**
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'image' => null,
        'command' => null,
        'status' => null,
        'state' => null,
        'ports' => null,
        'stats' => null
    ];

    /**
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'image' => false,
        'command' => false,
        'status' => false,
        'state' => false,
        'ports' => false,
        'stats' => true
    ];

    /**
      * @var array<string>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * @return array<string>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * @param array<string> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'image' => 'image',
        'command' => 'command',
        'status' => 'status',
        'state' => 'state',
        'ports' => 'ports',
        'stats' => 'stats'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'image' => 'setImage',
        'command' => 'setCommand',
        'status' => 'setStatus',
        'state' => 'setState',
        'ports' => 'setPorts',
        'stats' => 'setStats'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'image' => 'getImage',
        'command' => 'getCommand',
        'status' => 'getStatus',
        'state' => 'getState',
        'ports' => 'getPorts',
        'stats' => 'getStats'
    ];

    /**
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const STATE_CREATED = 'created';
    public const STATE_RUNNING = 'running';
    public const STATE_RESTARTING = 'restarting';
    public const STATE_EXITED = 'exited';
    public const STATE_PAUSED = 'paused';
    public const STATE_DEAD = 'dead';
    public const STATE_STOPPING = 'stopping';

    /**
     * @return array<string>
     */
    public function getStateAllowableValues(): array
    {
        return [
            self::STATE_CREATED,
            self::STATE_RUNNING,
            self::STATE_RESTARTING,
            self::STATE_EXITED,
            self::STATE_PAUSED,
            self::STATE_DEAD,
            self::STATE_STOPPING,
        ];
    }

    /**
     * @var array<string, mixed>
     */
    protected array $container = [];

    /**
     * @param array<string, mixed> $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = [])
    {
        $this->setIfExists('id', $data, null);
        $this->setIfExists('name', $data, null);
        $this->setIfExists('image', $data, null);
        $this->setIfExists('command', $data, null);
        $this->setIfExists('status', $data, null);
        $this->setIfExists('state', $data, null);
        $this->setIfExists('ports', $data, null);
        $this->setIfExists('stats', $data, null);
    }

    /**
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * @return array<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * @param string|null $id Unique container identifier (short form of Docker container ID)
     */
    public function setId(?string $id): static
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * @param string|null $name Container name as defined in docker-compose or assigned by Docker
     */
    public function setName(?string $name): static
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * @return string|null
     */
    public function getImage(): ?string
    {
        return $this->container['image'];
    }

    /**
     * @param string|null $image Docker image name and tag used to create this container
     */
    public function setImage(?string $image): static
    {
        $this->container['image'] = $image;

        return $this;
    }
    /**
     * @return string|null
     */
    public function getCommand(): ?string
    {
        return $this->container['command'];
    }

    /**
     * @param string|null $command Command being executed inside the container (may be truncated with ...)
     */
    public function setCommand(?string $command): static
    {
        $this->container['command'] = $command;

        return $this;
    }
    /**
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * @param string|null $status Human-readable container status including uptime, exit codes, or error information
     */
    public function setStatus(?string $status): static
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * @return string|null
     */
    public function getState(): ?string
    {
        return $this->container['state'];
    }

    /**
     * @param string|null $state Programmatic container lifecycle state for automated processing
     */
    public function setState(?string $state): static
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * @return \Hostinger\Model\VPSV1DockerManagerContainerPortCollection|null
     */
    public function getPorts(): ?\Hostinger\Model\VPSV1DockerManagerContainerPortCollection
    {
        return $this->container['ports'];
    }

    /**
     * @param \Hostinger\Model\VPSV1DockerManagerContainerPortCollection|null $ports ports
     */
    public function setPorts(?\Hostinger\Model\VPSV1DockerManagerContainerPortCollection $ports): static
    {
        $this->container['ports'] = $ports;

        return $this;
    }
    /**
     * @return \Hostinger\Model\VPSV1DockerManagerContainerStatsResource|null
     */
    public function getStats(): ?\Hostinger\Model\VPSV1DockerManagerContainerStatsResource
    {
        return $this->container['stats'];
    }

    /**
     * @param \Hostinger\Model\VPSV1DockerManagerContainerStatsResource|null $stats stats
     */
    public function setStats(?\Hostinger\Model\VPSV1DockerManagerContainerStatsResource $stats): static
    {
        if (is_null($stats)) {
            $this->openAPINullablesSetToNull[] = 'stats';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stats', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stats'] = $stats;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

