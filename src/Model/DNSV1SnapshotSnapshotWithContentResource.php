<?php
/** @noinspection PhpMissingParamTypeInspection */
/** @noinspection PhpMissingReturnTypeInspection */
/** @noinspection PhpUnnecessaryFullyQualifiedNameInspection */

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.96
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class DNSV1SnapshotSnapshotWithContentResource 
{
    /**
     * @param int $id
     * @param string $reason
     * @param \Hostinger\Model\DNSV1ZoneRecordCollection $snapshot
     * @param \DateTime $createdAt
     */
    protected static $openAPIModelName = 'DNSV1SnapshotSnapshotWithContentResource';
    public function __construct(
        private $id,
        private $reason,
        private $snapshot,
        private $createdAt,
    ) {
    }

    /**
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @param int $id
     *
     * @return self
     */
    public function setId($id): self
    {
        $this->id = $id;

        return $this;
    }
    /**
     * @return string
     */
    public function getReason()
    {
        return $this->reason;
    }

    /**
     * @param string $reason
     *
     * @return self
     */
    public function setReason($reason): self
    {
        $this->reason = $reason;

        return $this;
    }
    /**
     * @return \Hostinger\Model\DNSV1ZoneRecordCollection
     */
    public function getSnapshot()
    {
        return $this->snapshot;
    }

    /**
     * @param \Hostinger\Model\DNSV1ZoneRecordCollection $snapshot
     *
     * @return self
     */
    public function setSnapshot($snapshot): self
    {
        $this->snapshot = $snapshot;

        return $this;
    }
    /**
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * @param \DateTime $createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }
}

