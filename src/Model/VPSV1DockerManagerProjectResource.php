<?php
/** @noinspection PhpMissingFieldTypeInspection */
/** @noinspection PhpPluralMixedCanBeReplacedWithArrayInspection */
/** @noinspection PhpMissingParamTypeInspection */
/** @noinspection PhpMissingReturnTypeInspection */
/** @noinspection PhpUnnecessaryFullyQualifiedNameInspection */

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.98
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

class VPSV1DockerManagerProjectResource 
{
    public const string STATE_RUNNING = 'running';
    public const string STATE_STOPPED = 'stopped';
    public const string STATE_CREATED = 'created';
    public const string STATE_MIXED = 'mixed';
    public const string STATE_UNKNOWN = 'unknown';

    /**
     * @var string $name
     */
    private ?string $name;

    /**
     * @var string $status
     */
    private ?string $status;

    /**
     * @var string $state
     */
    private ?string $state;

    /**
     * @var string $path
     */
    private ?string $path;

    /**
     * @var \Hostinger\Model\VPSV1DockerManagerContainerResource[] $containers
     */
    private ?array $containers;

    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * @param string|null $name Docker Compose project name (derived from directory name or compose file)
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * @param string|null $status Raw output from docker compose ps command showing service count and states
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * @param string|null $state Derived project state parsed from the raw docker compose status
     */
    public function setState(?string $state): self
    {
        $this->state = $state;

        return $this;
    }
    public function getPath(): ?string
    {
        return $this->path;
    }

    /**
     * @param string|null $path Full filesystem path to the docker-compose.yml file
     */
    public function setPath(?string $path): self
    {
        $this->path = $path;

        return $this;
    }
    public function getContainers(): ?array
    {
        return $this->containers;
    }

    /**
     * @param \Hostinger\Model\VPSV1DockerManagerContainerResource[]|null $containers Array of [`VPS.V1.DockerManager.ContainerResource`](#model/vpsv1dockermanagercontainerresource)
     */
    public function setContainers(?array $containers): self
    {
        $this->containers = $containers;

        return $this;
    }
}

