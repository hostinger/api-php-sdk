<?php

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.73
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class VPSV1MetricsMetricsCollection implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static string $openAPIModelName = 'VPS.V1.Metrics.MetricsCollection';

    /**
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'cpuUsage' => '\Hostinger\Model\VPSV1MetricsMetricsCollectionCpuUsage',
        'ramUsage' => '\Hostinger\Model\VPSV1MetricsMetricsCollectionRamUsage',
        'diskSpace' => '\Hostinger\Model\VPSV1MetricsMetricsCollectionDiskSpace',
        'outgoingTraffic' => '\Hostinger\Model\VPSV1MetricsMetricsCollectionOutgoingTraffic',
        'incomingTraffic' => '\Hostinger\Model\VPSV1MetricsMetricsCollectionIncomingTraffic',
        'uptime' => '\Hostinger\Model\VPSV1MetricsMetricsCollectionUptime'
    ];

    /**
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'cpuUsage' => null,
        'ramUsage' => null,
        'diskSpace' => null,
        'outgoingTraffic' => null,
        'incomingTraffic' => null,
        'uptime' => null
    ];

    /**
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'cpuUsage' => true,
        'ramUsage' => true,
        'diskSpace' => true,
        'outgoingTraffic' => true,
        'incomingTraffic' => true,
        'uptime' => true
    ];

    /**
      * @var array<string>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * @return array<string>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * @param array<string> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'cpuUsage' => 'cpu_usage',
        'ramUsage' => 'ram_usage',
        'diskSpace' => 'disk_space',
        'outgoingTraffic' => 'outgoing_traffic',
        'incomingTraffic' => 'incoming_traffic',
        'uptime' => 'uptime'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $setters = [
        'cpuUsage' => 'setCpuUsage',
        'ramUsage' => 'setRamUsage',
        'diskSpace' => 'setDiskSpace',
        'outgoingTraffic' => 'setOutgoingTraffic',
        'incomingTraffic' => 'setIncomingTraffic',
        'uptime' => 'setUptime'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $getters = [
        'cpuUsage' => 'getCpuUsage',
        'ramUsage' => 'getRamUsage',
        'diskSpace' => 'getDiskSpace',
        'outgoingTraffic' => 'getOutgoingTraffic',
        'incomingTraffic' => 'getIncomingTraffic',
        'uptime' => 'getUptime'
    ];

    /**
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * @var array<string, mixed>
     */
    protected array $container = [];

    /**
     * @param array<string, mixed> $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = [])
    {
        $this->setIfExists('cpuUsage', $data, null);
        $this->setIfExists('ramUsage', $data, null);
        $this->setIfExists('diskSpace', $data, null);
        $this->setIfExists('outgoingTraffic', $data, null);
        $this->setIfExists('incomingTraffic', $data, null);
        $this->setIfExists('uptime', $data, null);
    }

    /**
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * @return array<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * @return \Hostinger\Model\VPSV1MetricsMetricsCollectionCpuUsage|null
     */
    public function getCpuUsage(): ?\Hostinger\Model\VPSV1MetricsMetricsCollectionCpuUsage
    {
        return $this->container['cpuUsage'];
    }

    /**
     * @param \Hostinger\Model\VPSV1MetricsMetricsCollectionCpuUsage|null $cpuUsage cpuUsage
     */
    public function setCpuUsage(?\Hostinger\Model\VPSV1MetricsMetricsCollectionCpuUsage $cpuUsage): static
    {
        if (is_null($cpuUsage)) {
            $this->openAPINullablesSetToNull[] = 'cpuUsage';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cpuUsage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cpuUsage'] = $cpuUsage;

        return $this;
    }
    /**
     * @return \Hostinger\Model\VPSV1MetricsMetricsCollectionRamUsage|null
     */
    public function getRamUsage(): ?\Hostinger\Model\VPSV1MetricsMetricsCollectionRamUsage
    {
        return $this->container['ramUsage'];
    }

    /**
     * @param \Hostinger\Model\VPSV1MetricsMetricsCollectionRamUsage|null $ramUsage ramUsage
     */
    public function setRamUsage(?\Hostinger\Model\VPSV1MetricsMetricsCollectionRamUsage $ramUsage): static
    {
        if (is_null($ramUsage)) {
            $this->openAPINullablesSetToNull[] = 'ramUsage';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ramUsage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ramUsage'] = $ramUsage;

        return $this;
    }
    /**
     * @return \Hostinger\Model\VPSV1MetricsMetricsCollectionDiskSpace|null
     */
    public function getDiskSpace(): ?\Hostinger\Model\VPSV1MetricsMetricsCollectionDiskSpace
    {
        return $this->container['diskSpace'];
    }

    /**
     * @param \Hostinger\Model\VPSV1MetricsMetricsCollectionDiskSpace|null $diskSpace diskSpace
     */
    public function setDiskSpace(?\Hostinger\Model\VPSV1MetricsMetricsCollectionDiskSpace $diskSpace): static
    {
        if (is_null($diskSpace)) {
            $this->openAPINullablesSetToNull[] = 'diskSpace';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('diskSpace', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['diskSpace'] = $diskSpace;

        return $this;
    }
    /**
     * @return \Hostinger\Model\VPSV1MetricsMetricsCollectionOutgoingTraffic|null
     */
    public function getOutgoingTraffic(): ?\Hostinger\Model\VPSV1MetricsMetricsCollectionOutgoingTraffic
    {
        return $this->container['outgoingTraffic'];
    }

    /**
     * @param \Hostinger\Model\VPSV1MetricsMetricsCollectionOutgoingTraffic|null $outgoingTraffic outgoingTraffic
     */
    public function setOutgoingTraffic(?\Hostinger\Model\VPSV1MetricsMetricsCollectionOutgoingTraffic $outgoingTraffic): static
    {
        if (is_null($outgoingTraffic)) {
            $this->openAPINullablesSetToNull[] = 'outgoingTraffic';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outgoingTraffic', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outgoingTraffic'] = $outgoingTraffic;

        return $this;
    }
    /**
     * @return \Hostinger\Model\VPSV1MetricsMetricsCollectionIncomingTraffic|null
     */
    public function getIncomingTraffic(): ?\Hostinger\Model\VPSV1MetricsMetricsCollectionIncomingTraffic
    {
        return $this->container['incomingTraffic'];
    }

    /**
     * @param \Hostinger\Model\VPSV1MetricsMetricsCollectionIncomingTraffic|null $incomingTraffic incomingTraffic
     */
    public function setIncomingTraffic(?\Hostinger\Model\VPSV1MetricsMetricsCollectionIncomingTraffic $incomingTraffic): static
    {
        if (is_null($incomingTraffic)) {
            $this->openAPINullablesSetToNull[] = 'incomingTraffic';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incomingTraffic', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incomingTraffic'] = $incomingTraffic;

        return $this;
    }
    /**
     * @return \Hostinger\Model\VPSV1MetricsMetricsCollectionUptime|null
     */
    public function getUptime(): ?\Hostinger\Model\VPSV1MetricsMetricsCollectionUptime
    {
        return $this->container['uptime'];
    }

    /**
     * @param \Hostinger\Model\VPSV1MetricsMetricsCollectionUptime|null $uptime uptime
     */
    public function setUptime(?\Hostinger\Model\VPSV1MetricsMetricsCollectionUptime $uptime): static
    {
        if (is_null($uptime)) {
            $this->openAPINullablesSetToNull[] = 'uptime';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uptime', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uptime'] = $uptime;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

