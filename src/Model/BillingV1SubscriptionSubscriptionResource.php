<?php

/**
 * Hostinger API PHP SDK
 *
 * @version 0.0.1-beta
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class BillingV1SubscriptionSubscriptionResource implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'Billing.V1.Subscription.SubscriptionResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'status' => 'string',
        'billing_period' => 'int',
        'billing_period_unit' => 'string',
        'currency_code' => 'string',
        'total_price' => 'int',
        'renewal_price' => 'int',
        'auto_renew' => 'bool',
        'created_at' => '\DateTime',
        'expires_at' => '\DateTime',
        'next_billing_at' => '\DateTime',
        'canceled_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'status' => null,
        'billing_period' => null,
        'billing_period_unit' => null,
        'currency_code' => null,
        'total_price' => null,
        'renewal_price' => null,
        'auto_renew' => null,
        'created_at' => 'date-time',
        'expires_at' => 'date-time',
        'next_billing_at' => 'date-time',
        'canceled_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'status' => false,
        'billing_period' => false,
        'billing_period_unit' => false,
        'currency_code' => false,
        'total_price' => false,
        'renewal_price' => false,
        'auto_renew' => false,
        'created_at' => false,
        'expires_at' => false,
        'next_billing_at' => true,
        'canceled_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'status' => 'status',
        'billing_period' => 'billing_period',
        'billing_period_unit' => 'billing_period_unit',
        'currency_code' => 'currency_code',
        'total_price' => 'total_price',
        'renewal_price' => 'renewal_price',
        'auto_renew' => 'auto_renew',
        'created_at' => 'created_at',
        'expires_at' => 'expires_at',
        'next_billing_at' => 'next_billing_at',
        'canceled_at' => 'canceled_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'status' => 'setStatus',
        'billing_period' => 'setBillingPeriod',
        'billing_period_unit' => 'setBillingPeriodUnit',
        'currency_code' => 'setCurrencyCode',
        'total_price' => 'setTotalPrice',
        'renewal_price' => 'setRenewalPrice',
        'auto_renew' => 'setAutoRenew',
        'created_at' => 'setCreatedAt',
        'expires_at' => 'setExpiresAt',
        'next_billing_at' => 'setNextBillingAt',
        'canceled_at' => 'setCanceledAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'status' => 'getStatus',
        'billing_period' => 'getBillingPeriod',
        'billing_period_unit' => 'getBillingPeriodUnit',
        'currency_code' => 'getCurrencyCode',
        'total_price' => 'getTotalPrice',
        'renewal_price' => 'getRenewalPrice',
        'auto_renew' => 'getAutoRenew',
        'created_at' => 'getCreatedAt',
        'expires_at' => 'getExpiresAt',
        'next_billing_at' => 'getNextBillingAt',
        'canceled_at' => 'getCanceledAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ACTIVE = 'active';
    public const STATUS_PAUSED = 'paused';
    public const STATUS_CANCELLED = 'cancelled';
    public const STATUS_NOT_RENEWING = 'not_renewing';
    public const STATUS_TRANSFERRED = 'transferred';
    public const STATUS_IN_TRIAL = 'in_trial';
    public const STATUS_FUTURE = 'future';

    /**
     * @return array<string>
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_PAUSED,
            self::STATUS_CANCELLED,
            self::STATUS_NOT_RENEWING,
            self::STATUS_TRANSFERRED,
            self::STATUS_IN_TRIAL,
            self::STATUS_FUTURE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array<string, mixed>
     */
    protected array $container = [];

    /**
     * @param array<string, mixed> $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = [])
    {
        $this->setIfExists('id', $data, null);
        $this->setIfExists('name', $data, null);
        $this->setIfExists('status', $data, null);
        $this->setIfExists('billing_period', $data, null);
        $this->setIfExists('billing_period_unit', $data, null);
        $this->setIfExists('currency_code', $data, null);
        $this->setIfExists('total_price', $data, null);
        $this->setIfExists('renewal_price', $data, null);
        $this->setIfExists('auto_renew', $data, null);
        $this->setIfExists('created_at', $data, null);
        $this->setIfExists('expires_at', $data, null);
        $this->setIfExists('next_billing_at', $data, null);
        $this->setIfExists('canceled_at', $data, null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * @return array<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model return true if all passed
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * @param string|null $id Subscription ID
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * @param string|null $name name
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * @param string|null $status status
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * @return int|null
     */
    public function getBillingPeriod(): ?int
    {
        return $this->container['billing_period'];
    }

    /**
     * @param int|null $billing_period billing_period
     */
    public function setBillingPeriod(?int $billing_period): static
    {
        if (is_null($billing_period)) {
            throw new InvalidArgumentException('non-nullable billing_period cannot be null');
        }
        $this->container['billing_period'] = $billing_period;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getBillingPeriodUnit(): ?string
    {
        return $this->container['billing_period_unit'];
    }

    /**
     * @param string|null $billing_period_unit billing_period_unit
     */
    public function setBillingPeriodUnit(?string $billing_period_unit): static
    {
        if (is_null($billing_period_unit)) {
            throw new InvalidArgumentException('non-nullable billing_period_unit cannot be null');
        }
        $this->container['billing_period_unit'] = $billing_period_unit;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getCurrencyCode(): ?string
    {
        return $this->container['currency_code'];
    }

    /**
     * @param string|null $currency_code currency_code
     */
    public function setCurrencyCode(?string $currency_code): static
    {
        if (is_null($currency_code)) {
            throw new InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * @return int|null
     */
    public function getTotalPrice(): ?int
    {
        return $this->container['total_price'];
    }

    /**
     * @param int|null $total_price Total price in cents
     */
    public function setTotalPrice(?int $total_price): static
    {
        if (is_null($total_price)) {
            throw new InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * @return int|null
     */
    public function getRenewalPrice(): ?int
    {
        return $this->container['renewal_price'];
    }

    /**
     * @param int|null $renewal_price Renewal price in cents
     */
    public function setRenewalPrice(?int $renewal_price): static
    {
        if (is_null($renewal_price)) {
            throw new InvalidArgumentException('non-nullable renewal_price cannot be null');
        }
        $this->container['renewal_price'] = $renewal_price;

        return $this;
    }

    /**
     * @return bool|null
     */
    public function getAutoRenew(): ?bool
    {
        return $this->container['auto_renew'];
    }

    /**
     * @param bool|null $auto_renew auto_renew
     */
    public function setAutoRenew(?bool $auto_renew): static
    {
        if (is_null($auto_renew)) {
            throw new InvalidArgumentException('non-nullable auto_renew cannot be null');
        }
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['created_at'];
    }

    /**
     * @param \DateTime|null $created_at created_at
     */
    public function setCreatedAt(?\DateTime $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * @return \DateTime|null
     */
    public function getExpiresAt(): ?\DateTime
    {
        return $this->container['expires_at'];
    }

    /**
     * @param \DateTime|null $expires_at expires_at
     */
    public function setExpiresAt(?\DateTime $expires_at): static
    {
        if (is_null($expires_at)) {
            throw new InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * @return \DateTime|null
     */
    public function getNextBillingAt(): ?\DateTime
    {
        return $this->container['next_billing_at'];
    }

    /**
     * @param \DateTime|null $next_billing_at next_billing_at
     */
    public function setNextBillingAt(?\DateTime $next_billing_at): static
    {
        if (is_null($next_billing_at)) {
            array_push($this->openAPINullablesSetToNull, 'next_billing_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_billing_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['next_billing_at'] = $next_billing_at;

        return $this;
    }

    /**
     * @return \DateTime|null
     */
    public function getCanceledAt(): ?\DateTime
    {
        return $this->container['canceled_at'];
    }

    /**
     * @param \DateTime|null $canceled_at canceled_at
     */
    public function setCanceledAt(?\DateTime $canceled_at): static
    {
        if (is_null($canceled_at)) {
            array_push($this->openAPINullablesSetToNull, 'canceled_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('canceled_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['canceled_at'] = $canceled_at;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


