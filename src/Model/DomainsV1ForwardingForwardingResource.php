<?php
/** @noinspection PhpMissingParamTypeInspection */
/** @noinspection PhpMissingReturnTypeInspection */
/** @noinspection PhpUnnecessaryFullyQualifiedNameInspection */

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.96
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class DomainsV1ForwardingForwardingResource 
{
    /**
     * @param string|null $domain
     * @param string $redirectType
     * @param string $redirectUrl
     * @param \DateTime $createdAt
     * @param \DateTime|null $updatedAt
     */
    protected static $openAPIModelName = 'DomainsV1ForwardingForwardingResource';
    public function __construct(
        private $domain = null,
        private $redirectType,
        private $redirectUrl,
        private $createdAt,
        private $updatedAt = null,
    ) {
    }

    /**
     * @return string|null
     */
    public function getDomain()
    {
        return $this->domain;
    }

    /**
     * @param string|null $domain
     *
     * @return self
     */
    public function setDomain($domain): self
    {
        $this->domain = $domain;

        return $this;
    }
    /**
     * @return string
     */
    public function getRedirectType()
    {
        return $this->redirectType;
    }

    /**
     * @param string $redirectType
     *
     * @return self
     */
    public function setRedirectType($redirectType): self
    {
        $this->redirectType = $redirectType;

        return $this;
    }
    /**
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->redirectUrl;
    }

    /**
     * @param string $redirectUrl
     *
     * @return self
     */
    public function setRedirectUrl($redirectUrl): self
    {
        $this->redirectUrl = $redirectUrl;

        return $this;
    }
    /**
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * @param \DateTime $createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }
    /**
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * @param \DateTime|null $updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }
}

