<?php

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.1-beta
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class VPSV1MalwareMetricsResource implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'VPS.V1.Malware.MetricsResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'records' => 'int',
        'malicious' => 'int',
        'compromised' => 'int',
        'scanned_files' => 'int',
        'scan_started_at' => '\DateTime',
        'scan_ended_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'records' => null,
        'malicious' => null,
        'compromised' => null,
        'scanned_files' => null,
        'scan_started_at' => 'date-time',
        'scan_ended_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'records' => false,
        'malicious' => false,
        'compromised' => false,
        'scanned_files' => false,
        'scan_started_at' => false,
        'scan_ended_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'records' => 'records',
        'malicious' => 'malicious',
        'compromised' => 'compromised',
        'scanned_files' => 'scanned_files',
        'scan_started_at' => 'scan_started_at',
        'scan_ended_at' => 'scan_ended_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'records' => 'setRecords',
        'malicious' => 'setMalicious',
        'compromised' => 'setCompromised',
        'scanned_files' => 'setScannedFiles',
        'scan_started_at' => 'setScanStartedAt',
        'scan_ended_at' => 'setScanEndedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'records' => 'getRecords',
        'malicious' => 'getMalicious',
        'compromised' => 'getCompromised',
        'scanned_files' => 'getScannedFiles',
        'scan_started_at' => 'getScanStartedAt',
        'scan_ended_at' => 'getScanEndedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array<string, mixed>
     */
    protected array $container = [];

    /**
     * @param array<string, mixed> $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = [])
    {
        $this->setIfExists('records', $data, null);
        $this->setIfExists('malicious', $data, null);
        $this->setIfExists('compromised', $data, null);
        $this->setIfExists('scanned_files', $data, null);
        $this->setIfExists('scan_started_at', $data, null);
        $this->setIfExists('scan_ended_at', $data, null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * @return array<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model return true if all passed
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * @return int|null
     */
    public function getRecords(): ?int
    {
        return $this->container['records'];
    }

    /**
     * @param int|null $records Records found during last scan
     */
    public function setRecords(?int $records): static
    {
        if (is_null($records)) {
            throw new InvalidArgumentException('non-nullable records cannot be null');
        }
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * @return int|null
     */
    public function getMalicious(): ?int
    {
        return $this->container['malicious'];
    }

    /**
     * @param int|null $malicious Malicious files found during last scan
     */
    public function setMalicious(?int $malicious): static
    {
        if (is_null($malicious)) {
            throw new InvalidArgumentException('non-nullable malicious cannot be null');
        }
        $this->container['malicious'] = $malicious;

        return $this;
    }

    /**
     * @return int|null
     */
    public function getCompromised(): ?int
    {
        return $this->container['compromised'];
    }

    /**
     * @param int|null $compromised Compromised files found during last scan
     */
    public function setCompromised(?int $compromised): static
    {
        if (is_null($compromised)) {
            throw new InvalidArgumentException('non-nullable compromised cannot be null');
        }
        $this->container['compromised'] = $compromised;

        return $this;
    }

    /**
     * @return int|null
     */
    public function getScannedFiles(): ?int
    {
        return $this->container['scanned_files'];
    }

    /**
     * @param int|null $scanned_files Total number of files scanned during last scan
     */
    public function setScannedFiles(?int $scanned_files): static
    {
        if (is_null($scanned_files)) {
            throw new InvalidArgumentException('non-nullable scanned_files cannot be null');
        }
        $this->container['scanned_files'] = $scanned_files;

        return $this;
    }

    /**
     * @return \DateTime|null
     */
    public function getScanStartedAt(): ?\DateTime
    {
        return $this->container['scan_started_at'];
    }

    /**
     * @param \DateTime|null $scan_started_at scan_started_at
     */
    public function setScanStartedAt(?\DateTime $scan_started_at): static
    {
        if (is_null($scan_started_at)) {
            throw new InvalidArgumentException('non-nullable scan_started_at cannot be null');
        }
        $this->container['scan_started_at'] = $scan_started_at;

        return $this;
    }

    /**
     * @return \DateTime|null
     */
    public function getScanEndedAt(): ?\DateTime
    {
        return $this->container['scan_ended_at'];
    }

    /**
     * @param \DateTime|null $scan_ended_at scan_ended_at
     */
    public function setScanEndedAt(?\DateTime $scan_ended_at): static
    {
        if (is_null($scan_ended_at)) {
            array_push($this->openAPINullablesSetToNull, 'scan_ended_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scan_ended_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scan_ended_at'] = $scan_ended_at;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


