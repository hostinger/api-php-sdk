<?php

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.73
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class DomainsV1AvailabilityAvailabilityResource implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static string $openAPIModelName = 'Domains.V1.Availability.AvailabilityResource';

    /**
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'domain' => 'string',
        'isAvailable' => 'bool',
        'isAlternative' => 'bool',
        'restriction' => 'string'
    ];

    /**
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'domain' => null,
        'isAvailable' => null,
        'isAlternative' => null,
        'restriction' => null
    ];

    /**
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'domain' => true,
        'isAvailable' => false,
        'isAlternative' => false,
        'restriction' => true
    ];

    /**
      * @var array<string>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * @return array<string>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * @param array<string> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'domain' => 'domain',
        'isAvailable' => 'is_available',
        'isAlternative' => 'is_alternative',
        'restriction' => 'restriction'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $setters = [
        'domain' => 'setDomain',
        'isAvailable' => 'setIsAvailable',
        'isAlternative' => 'setIsAlternative',
        'restriction' => 'setRestriction'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $getters = [
        'domain' => 'getDomain',
        'isAvailable' => 'getIsAvailable',
        'isAlternative' => 'getIsAlternative',
        'restriction' => 'getRestriction'
    ];

    /**
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * @var array<string, mixed>
     */
    protected array $container = [];

    /**
     * @param array<string, mixed> $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = [])
    {
        $this->setIfExists('domain', $data, null);
        $this->setIfExists('isAvailable', $data, null);
        $this->setIfExists('isAlternative', $data, null);
        $this->setIfExists('restriction', $data, null);
    }

    /**
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * @return array<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * @return string|null
     */
    public function getDomain(): ?string
    {
        return $this->container['domain'];
    }

    /**
     * @param string|null $domain Domain name, `null` when not claimed free domain
     */
    public function setDomain(?string $domain): static
    {
        if (is_null($domain)) {
            $this->openAPINullablesSetToNull[] = 'domain';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domain', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['domain'] = $domain;

        return $this;
    }
    /**
     * @return bool|null
     */
    public function getIsAvailable(): ?bool
    {
        return $this->container['isAvailable'];
    }

    /**
     * @param bool|null $isAvailable `true` if domain is available for registration
     */
    public function setIsAvailable(?bool $isAvailable): static
    {
        $this->container['isAvailable'] = $isAvailable;

        return $this;
    }
    /**
     * @return bool|null
     */
    public function getIsAlternative(): ?bool
    {
        return $this->container['isAlternative'];
    }

    /**
     * @param bool|null $isAlternative `true` if domain is provided as an alternative
     */
    public function setIsAlternative(?bool $isAlternative): static
    {
        $this->container['isAlternative'] = $isAlternative;

        return $this;
    }
    /**
     * @return string|null
     */
    public function getRestriction(): ?string
    {
        return $this->container['restriction'];
    }

    /**
     * @param string|null $restriction Special rules and/or restrictions applied for registering TLD
     */
    public function setRestriction(?string $restriction): static
    {
        if (is_null($restriction)) {
            $this->openAPINullablesSetToNull[] = 'restriction';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('restriction', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['restriction'] = $restriction;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

