<?php

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.96
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Hostinger\ObjectSerializer;

/**
 * @implements ArrayAccess<string, mixed>
 */
class VPSV1DockerManagerContainerPortResource implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static string $openAPIModelName = 'VPS.V1.DockerManager.ContainerPortResource';

    /**
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => 'string',
        'protocol' => 'string',
        'hostIp' => 'string',
        'hostPort' => 'int',
        'containerPort' => 'int',
        'hostPortStart' => 'int',
        'hostPortEnd' => 'int',
        'containerPortStart' => 'int',
        'containerPortEnd' => 'int'
    ];

    /**
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'protocol' => null,
        'hostIp' => null,
        'hostPort' => null,
        'containerPort' => null,
        'hostPortStart' => null,
        'hostPortEnd' => null,
        'containerPortStart' => null,
        'containerPortEnd' => null
    ];

    /**
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => false,
        'protocol' => false,
        'hostIp' => true,
        'hostPort' => true,
        'containerPort' => true,
        'hostPortStart' => true,
        'hostPortEnd' => true,
        'containerPortStart' => true,
        'containerPortEnd' => true
    ];

    /**
      * @var array<string>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * @return array<string>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * @param array<string> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'protocol' => 'protocol',
        'hostIp' => 'host_ip',
        'hostPort' => 'host_port',
        'containerPort' => 'container_port',
        'hostPortStart' => 'host_port_start',
        'hostPortEnd' => 'host_port_end',
        'containerPortStart' => 'container_port_start',
        'containerPortEnd' => 'container_port_end'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'protocol' => 'setProtocol',
        'hostIp' => 'setHostIp',
        'hostPort' => 'setHostPort',
        'containerPort' => 'setContainerPort',
        'hostPortStart' => 'setHostPortStart',
        'hostPortEnd' => 'setHostPortEnd',
        'containerPortStart' => 'setContainerPortStart',
        'containerPortEnd' => 'setContainerPortEnd'
    ];

    /**
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'protocol' => 'getProtocol',
        'hostIp' => 'getHostIp',
        'hostPort' => 'getHostPort',
        'containerPort' => 'getContainerPort',
        'hostPortStart' => 'getHostPortStart',
        'hostPortEnd' => 'getHostPortEnd',
        'containerPortStart' => 'getContainerPortStart',
        'containerPortEnd' => 'getContainerPortEnd'
    ];

    /**
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PUBLISHED = 'published';
    public const TYPE_PUBLISHED_RANGE = 'published_range';
    public const TYPE_EXPOSED = 'exposed';
    public const TYPE_EXPOSED_RANGE = 'exposed_range';
    public const PROTOCOL_TCP = 'tcp';
    public const PROTOCOL_UDP = 'udp';

    /**
     * @return array<string>
     */
    public function getTypeAllowableValues(): array
    {
        return [
            self::TYPE_PUBLISHED,
            self::TYPE_PUBLISHED_RANGE,
            self::TYPE_EXPOSED,
            self::TYPE_EXPOSED_RANGE,
        ];
    }

    /**
     * @return array<string>
     */
    public function getProtocolAllowableValues(): array
    {
        return [
            self::PROTOCOL_TCP,
            self::PROTOCOL_UDP,
        ];
    }

    /**
     * @var array<string, mixed>
     */
    protected array $container = [];

    /**
     * @param array<string, mixed> $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = [])
    {
        $this->setIfExists('type', $data, null);
        $this->setIfExists('protocol', $data, null);
        $this->setIfExists('hostIp', $data, null);
        $this->setIfExists('hostPort', $data, null);
        $this->setIfExists('containerPort', $data, null);
        $this->setIfExists('hostPortStart', $data, null);
        $this->setIfExists('hostPortEnd', $data, null);
        $this->setIfExists('containerPortStart', $data, null);
        $this->setIfExists('containerPortEnd', $data, null);
    }

    /**
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * @return array<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protocol', must be one of '%s'",
                $this->container['protocol'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * @param string|null $type Port mapping type - published (accessible from host), exposed (only internal), or range variants
     */
    public function setType(?string $type): static
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * @return string|null
     */
    public function getProtocol(): ?string
    {
        return $this->container['protocol'];
    }

    /**
     * @param string|null $protocol Network protocol used for communication
     */
    public function setProtocol(?string $protocol): static
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!in_array($protocol, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protocol', must be one of '%s'",
                    $protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }
    /**
     * @return string|null
     */
    public function getHostIp(): ?string
    {
        return $this->container['hostIp'];
    }

    /**
     * @param string|null $hostIp IP address on host where port is bound (null for exposed-only ports)
     */
    public function setHostIp(?string $hostIp): static
    {
        if (is_null($hostIp)) {
            $this->openAPINullablesSetToNull[] = 'hostIp';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hostIp', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hostIp'] = $hostIp;

        return $this;
    }
    /**
     * @return int|null
     */
    public function getHostPort(): ?int
    {
        return $this->container['hostPort'];
    }

    /**
     * @param int|null $hostPort Port number on host machine (null for exposed-only or range ports)
     */
    public function setHostPort(?int $hostPort): static
    {
        if (is_null($hostPort)) {
            $this->openAPINullablesSetToNull[] = 'hostPort';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hostPort', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hostPort'] = $hostPort;

        return $this;
    }
    /**
     * @return int|null
     */
    public function getContainerPort(): ?int
    {
        return $this->container['containerPort'];
    }

    /**
     * @param int|null $containerPort Port number inside container (null for range ports)
     */
    public function setContainerPort(?int $containerPort): static
    {
        if (is_null($containerPort)) {
            $this->openAPINullablesSetToNull[] = 'containerPort';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('containerPort', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['containerPort'] = $containerPort;

        return $this;
    }
    /**
     * @return int|null
     */
    public function getHostPortStart(): ?int
    {
        return $this->container['hostPortStart'];
    }

    /**
     * @param int|null $hostPortStart Starting port number in host port range (null for single ports)
     */
    public function setHostPortStart(?int $hostPortStart): static
    {
        if (is_null($hostPortStart)) {
            $this->openAPINullablesSetToNull[] = 'hostPortStart';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hostPortStart', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hostPortStart'] = $hostPortStart;

        return $this;
    }
    /**
     * @return int|null
     */
    public function getHostPortEnd(): ?int
    {
        return $this->container['hostPortEnd'];
    }

    /**
     * @param int|null $hostPortEnd Ending port number in host port range (null for single ports)
     */
    public function setHostPortEnd(?int $hostPortEnd): static
    {
        if (is_null($hostPortEnd)) {
            $this->openAPINullablesSetToNull[] = 'hostPortEnd';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hostPortEnd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hostPortEnd'] = $hostPortEnd;

        return $this;
    }
    /**
     * @return int|null
     */
    public function getContainerPortStart(): ?int
    {
        return $this->container['containerPortStart'];
    }

    /**
     * @param int|null $containerPortStart Starting port number in container port range (null for single ports)
     */
    public function setContainerPortStart(?int $containerPortStart): static
    {
        if (is_null($containerPortStart)) {
            $this->openAPINullablesSetToNull[] = 'containerPortStart';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('containerPortStart', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['containerPortStart'] = $containerPortStart;

        return $this;
    }
    /**
     * @return int|null
     */
    public function getContainerPortEnd(): ?int
    {
        return $this->container['containerPortEnd'];
    }

    /**
     * @param int|null $containerPortEnd Ending port number in container port range (null for single ports)
     */
    public function setContainerPortEnd(?int $containerPortEnd): static
    {
        if (is_null($containerPortEnd)) {
            $this->openAPINullablesSetToNull[] = 'containerPortEnd';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('containerPortEnd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['containerPortEnd'] = $containerPortEnd;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

